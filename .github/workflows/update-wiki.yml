name: Update Wiki from DeepWiki

on:
  push:
    branches:
      - main

jobs:
  update-wiki:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: deepwiki-mcp/node_modules
          key: ${{ runner.os }}-deepwiki-mcp-${{ hashFiles('deepwiki-mcp/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deepwiki-mcp-

      - name: Clone DeepWiki MCP
        run: |
          git clone https://github.com/regenrek/deepwiki-mcp.git deepwiki-mcp

      - name: Install DeepWiki MCP dependencies
        working-directory: deepwiki-mcp
        run: |
          npm ci

      - name: Build DeepWiki MCP
        working-directory: deepwiki-mcp
        run: |
          echo "Scripts disponibles en package.json:"
          npm run || true

          if npm run build 2>/dev/null; then
            echo "‚úîÔ∏è Build: npm run build"
          elif npm run compile 2>/dev/null; then
            echo "‚úîÔ∏è Build: npm run compile"
          elif npm run dist 2>/dev/null; then
            echo "‚úîÔ∏è Build: npm run dist"
          else
            echo "üîß Intentando con tsc"
            npx tsc || echo "‚ö†Ô∏è tsc fall√≥"
          fi

          echo "Contenido ra√≠z:"
          ls -la
          if [ -d "dist" ]; then
            ls -la dist/
          else
            echo "‚ùå No existe dist/, buscando .mjs"
            find . -name "*.mjs" -type f
          fi

      - name: Start DeepWiki MCP (HTTP mode)
        working-directory: deepwiki-mcp
        run: |
          if [ ! -f "dist/index.mjs" ]; then
            echo "‚ùå dist/index.mjs no encontrado"
            find . -name "*.mjs" -type f
            exit 1
          fi

          node ./bin/cli.mjs --http --port 3000 > ../deepwiki.log 2>&1 &
          DEEPWIKI_PID=$!
          echo "PID DeepWiki: $DEEPWIKI_PID"

          for i in {1..30}; do
            if curl -s http://localhost:3000/mcp >/dev/null; then
              echo "‚úîÔ∏è MCP disponible"
              break
            fi
            echo "‚è≥ Esperando MCP‚Ä¶ ($i/30)"
            sleep 2
          done

          if ! curl -s http://localhost:3000/mcp >/dev/null; then
            echo "‚ùå MCP no disponible tras 60s"
            cat ../deepwiki.log
            ps aux | grep node | grep -v grep || echo "Proceso ca√≠do"
            exit 1
          fi

          ps aux | grep node | grep -v grep

      - name: Export ALL Markdown from DeepWiki
        run: |
          mkdir -p docs-md

          if ! curl -s http://localhost:3000/mcp >/dev/null; then
            echo "‚ùå Servicio no arrancado"
            cat deepwiki.log || echo "Sin logs"
            exit 1
          fi

          echo "üîç Listando herramientas‚Ä¶"
          curl -X POST http://localhost:3000/mcp \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","method":"tools/list","id":1}' -s || echo "‚ö†Ô∏è tools/list fall√≥"

          DEEPWIKI_URL="https://deepwiki.com/VforVitorio/F1_Strat_Manager"
          if curl -s --head "$DEEPWIKI_URL" | head -n1 | grep -q "200 OK"; then
            echo "‚úÖ URL accesible"
          else
            echo "‚ö†Ô∏è URL puede no ser accesible"
          fi

          JSON_PAYLOAD=$(
            jq -cn --arg url "$DEEPWIKI_URL" '{"jsonrpc":"2.0","method":"tools/call","params":{"name":"deepwiki_fetch","arguments":{"url":$url,"maxDepth":1,"mode":"pages"}},"id":1}'
          )

          echo "$JSON_PAYLOAD"

          HTTP_CODE=$(curl -X POST http://localhost:3000/mcp \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            -o docs-md/all-pages-raw.json \
            -w "%{http_code}" -s)

          echo "HTTP status: $HTTP_CODE"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "üîÑ Fallback a modo aggregate"
            FALLBACK_PAYLOAD=$(
              jq -cn --arg url "$DEEPWIKI_URL" '{"jsonrpc":"2.0","method":"tools/call","params":{"name":"deepwiki_fetch","arguments":{"url":$url,"maxDepth":1,"mode":"aggregate"}},"id":1}'
            )
            HTTP_CODE=$(curl -X POST http://localhost:3000/mcp \
              -H "Content-Type: application/json" \
              -d "$FALLBACK_PAYLOAD" \
              -o docs-md/all-pages-raw.json \
              -w "%{http_code}" -s)
            if [ "$HTTP_CODE" != "200" ]; then
              echo "‚ùå Fallback fall√≥ ($HTTP_CODE)"
              exit 1
            fi
          fi

          if [ ! -s docs-md/all-pages-raw.json ]; then
            echo "‚ùå JSON vac√≠o o inexistente"
            exit 1
          fi

          echo "‚úÖ Export OK"

      - name: Prepare Python processing script
        run: |
          mkdir -p deepwiki-mcp/scripts
          cat << 'EOF' > deepwiki-mcp/scripts/process_pages.py
          #!/usr/bin/env python3
          import json, re, sys, os

          def clean(content):
              patterns = [
                  r'.*?DeepWiki.*?\n',
                  r'.*?Powered by Devin.*?\n',
                  r'.*?Share.*?\n',
                  r'.*?Last indexed:.*?\n',
                  r'.*?Try DeepWiki.*?\n',
                  r'- Overview\n- System Architecture.*?- Getting Started\n',
                  r'Menu\n',
                  r'### On this page.*?- Getting Started\n',
                  r'Relevant source files.*?\n\n',
                  r'Sources:.*?\n'
              ]
              for pat in patterns:
                  content = re.sub(pat, '', content, flags=re.IGNORECASE|re.DOTALL)
              content = re.sub(r'\n{3,}', '\n\n', content)
              return content.strip()

          def add_diagrams(content):
              # placeholder: inserta aqu√≠ los mermaid si los necesitas
              return content

          def get_title(text):
              for l in text.split('\n'):
                  if l.startswith('# '):
                      return l[2:].strip()
              return 'Documentation'

          def slugify(s):
              fn = re.sub(r'[^\w\s-]', '', s).strip().lower()
              return re.sub(r'[-\s]+', '-', fn) + '.md'

          def main(src_json, out_dir):
              with open(src_json, encoding='utf-8') as f:
                  data = json.load(f)
              pages = []
              res = data.get('result', {})
              if isinstance(res, dict) and 'content' in res:
                  c = res['content']
                  if isinstance(c, list):
                      pages = [p['text'] for p in c if 'text' in p]
                  elif isinstance(c, dict) and 'text' in c:
                      pages = [c['text']]
              elif isinstance(res, str):
                  pages = [res]

              os.makedirs(out_dir, exist_ok=True)
              files = []
              for txt in pages:
                  cleaned = clean(txt)
                  cleaned = add_diagrams(cleaned)
                  if len(cleaned) < 50:
                      continue
                  title = get_title(cleaned)
                  fname = slugify(title)
                  path = os.path.join(out_dir, fname)
                  if not cleaned.startswith('# '):
                      cleaned = f'# {title}\n\n' + cleaned
                  with open(path, 'w', encoding='utf-8') as o:
                      o.write(cleaned)
                  files.append((fname, title))

              toc = ['# F1 Strategy Manager - Complete Documentation', '', '## Table of Contents', '']
              for fn, t in files:
                  anchor = t.lower().replace(' ', '-')
                  toc.append(f'- [{t}](#{anchor})')
              toc.append('\n---\n')
              content = '\n'.join(toc)
              for fn, _ in files:
                  with open(os.path.join(out_dir, fn), encoding='utf-8') as f:
                      content += '\n' + f.read() + '\n\n---\n\n'
              with open(os.path.join(out_dir, 'f1-strat-manager-complete.md'), 'w', encoding='utf-8') as o:
                  o.write(content)

          if __name__ == '__main__':
              main(sys.argv[1], sys.argv[2])
          EOF
          chmod +x deepwiki-mcp/scripts/process_pages.py

      - name: Process and Split Multiple Pages
        run: |
          deepwiki-mcp/scripts/process_pages.py docs-md docs-md

      - name: Checkout Wiki
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}.wiki
          token: ${{ secrets.WIKI_PAT }}
          path: wiki

      - name: Copy All Documentation to Wiki
        run: |
          cp docs-md/*.md wiki/
          cat << 'EOF' > wiki/Home.md
          # Welcome to F1 Strategy Manager Wiki

          This wiki contains comprehensive documentation for the F1 Strategy Manager project.

          ## Complete Documentation

          - **[Complete Documentation](f1-strat-manager-complete)** - Full system documentation with all sections

          ## Individual Sections
          EOF
          for file in docs-md/*.md; do
            [ "$(basename "$file")" = "f1-strat-manager-complete.md" ] && continue
            title=$(head -1 "$file" | sed 's/^# //')
            slug=$(basename "$file" .md)
            echo "- **[$title]($slug)**" >> wiki/Home.md
          done
          cat << 'EOF' >> wiki/Home.md

          ---

          *This documentation is automatically generated from the project's DeepWiki documentation.*
          EOF

      - name: Commit & Push changes
        working-directory: wiki
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --quiet --staged; then
            echo "No hay cambios para commitear"
          else
            git commit -m "üîÑ Update Complete Wiki from DeepWiki - $(date '+%Y-%m-%d %H:%M')"
            git push
            echo "‚úÖ Wiki actualizada"
          fi
