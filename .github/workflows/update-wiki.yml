name: Update GitHub Wiki from DeepWiki MCP

on:
  push:
    branches:
      - main

env:
  NODE_ENV: production
  DEEPWIKI_PORT: 3000

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Clone DeepWiki MCP
        run: |
          git clone https://github.com/regenrek/deepwiki-mcp.git deepwiki-mcp

      - name: Install & Build DeepWiki MCP
        working-directory: deepwiki-mcp
        run: |
          npm ci
          npm run build
          ls -la bin/

      - name: Start DeepWiki MCP Server
        working-directory: deepwiki-mcp
        run: |
          npx mcp-deepwiki --http --port ${{ env.DEEPWIKI_PORT }} > ../deepwiki.log 2>&1 &
          echo "Waiting for DeepWiki MCP..."
          for i in {1..30}; do
            curl -s http://localhost:${{ env.DEEPWIKI_PORT }}/mcp && break || sleep 2
          done

      - name: Prepare docs directory
        run: |
          rm -rf docs-md
          mkdir docs-md

      - name: Export full documentation
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","id":1,"method":"exportAll","params":{}}' \
            -o docs-md/f1-strat-manager-complete.md

      - name: Export "Overview" section
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":2,
              "method":"exportSection",
              "params":{"path":"01-overview"}
            }' \
            -o docs-md/01-overview.md

      - name: Export "System Architecture" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":3,
              "method":"exportSection",
              "params":{"path":"01-01-system-architecture"}
            }' \
            -o docs-md/01-01-system-architecture.md

      - name: Export "Installation and Setup" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":4,
              "method":"exportSection",
              "params":{"path":"01-02-installation-setup"}
            }' \
            -o docs-md/01-02-installation-setup.md

      - name: Export "Streamlit Dashboard" section
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":5,
              "method":"exportSection",
              "params":{"path":"02-streamlit-dashboard"}
            }' \
            -o docs-md/02-streamlit-dashboard.md

      - name: Export "Strategy Recommendations View" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":6,
              "method":"exportSection",
              "params":{"path":"02-01-strategy-recommendations-view"}
            }' \
            -o docs-md/02-01-strategy-recommendations-view.md

      - name: Export "Gap Analysis View" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":7,
              "method":"exportSection",
              "params":{"path":"02-02-gap-analysis-view"}
            }' \
            -o docs-md/02-02-gap-analysis-view.md

      - name: Export "Radio Analysis View" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":8,
              "method":"exportSection",
              "params":{"path":"02-03-radio-analysis-view"}
            }' \
            -o docs-md/02-03-radio-analysis-view.md

      - name: Export "Time Predictions View" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":9,
              "method":"exportSection",
              "params":{"path":"02-04-time-predictions-view"}
            }' \
            -o docs-md/02-04-time-predictions-view.md

      - name: Export "Strategy Chat Interface" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":10,
              "method":"exportSection",
              "params":{"path":"02-05-strategy-chat-interface"}
            }' \
            -o docs-md/02-05-strategy-chat-interface.md

      - name: Export "Machine Learning Models" section
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":11,
              "method":"exportSection",
              "params":{"path":"03-machine-learning-models"}
            }' \
            -o docs-md/03-machine-learning-models.md

      - name: Export "Lap Time Prediction" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":12,
              "method":"exportSection",
              "params":{"path":"03-01-lap-time-prediction"}
            }' \
            -o docs-md/03-01-lap-time-prediction.md

      - name: Export "Tire Degradation Modeling" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":13,
              "method":"exportSection",
              "params":{"path":"03-02-tire-degradation-modeling"}
            }' \
            -o docs-md/03-02-tire-degradation-modeling.md

      - name: Export "Vision-based Gap Calculation" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":14,
              "method":"exportSection",
              "params":{"path":"03-03-vision-based-gap-calculation"}
            }' \
            -o docs-md/03-03-vision-based-gap-calculation.md

      - name: Export "NLP Pipeline" section
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":15,
              "method":"exportSection",
              "params":{"path":"04-nlp-pipeline"}
            }' \
            -o docs-md/04-nlp-pipeline.md

      - name: Export "Radio Transcription" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":16,
              "method":"exportSection",
              "params":{"path":"04-01-radio-transcription"}
            }' \
            -o docs-md/04-01-radio-transcription.md

      - name: Export "Sentiment and Intent Analysis" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":17,
              "method":"exportSection",
              "params":{"path":"04-02-sentiment-intent-analysis"}
            }' \
            -o docs-md/04-02-sentiment-intent-analysis.md

      - name: Export "Named Entity Recognition" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":18,
              "method":"exportSection",
              "params":{"path":"04-03-named-entity-recognition"}
            }' \
            -o docs-md/04-03-named-entity-recognition.md

      - name: Export "Expert System" section
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":19,
              "method":"exportSection",
              "params":{"path":"05-expert-system"}
            }' \
            -o docs-md/05-expert-system.md

      - name: Export "Degradation Rules" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":20,
              "method":"exportSection",
              "params":{"path":"05-01-degradation-rules"}
            }' \
            -o docs-md/05-01-degradation-rules.md

      - name: Export "Gap Analysis Rules" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":21,
              "method":"exportSection",
              "params":{"path":"05-02-gap-analysis-rules"}
            }' \
            -o docs-md/05-02-gap-analysis-rules.md

      - name: Export "Radio Message Rules" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":22,
              "method":"exportSection",
              "params":{"path":"05-03-radio-message-rules"}
            }' \
            -o docs-md/05-03-radio-message-rules.md

      - name: Export "Integrated Rule Engine" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":23,
              "method":"exportSection",
              "params":{"path":"05-04-integrated-rule-engine"}
            }' \
            -o docs-md/05-04-integrated-rule-engine.md

      - name: Export "Developer Guide" section
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":24,
              "method":"exportSection",
              "params":{"path":"06-developer-guide"}
            }' \
            -o docs-md/06-developer-guide.md

      - name: Export "API Reference" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":25,
              "method":"exportSection",
              "params":{"path":"06-01-api-reference"}
            }' \
            -o docs-md/06-01-api-reference.md

      - name: Export "Integration Guide" subsection
        run: |
          curl -s -X POST http://localhost:${{ env.DEEPWIKI_PORT }}/mcp \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "id":26,
              "method":"exportSection",
              "params":{"path":"06-02-integration-guide"}
            }' \
            -o docs-md/06-02-integration-guide.md

      - name: Remove current GitHub Wiki
        run: |
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.wiki.git wiki
          rm -rf wiki/*

      - name: Copy All Documentation to Wiki
        run: |
          # Verify we have files to copy
          if [ ! -d docs-md ] || [ -z "$(ls -A docs-md/*.md 2>/dev/null)" ]; then
            echo "Error: No markdown files to copy"
            exit 1
          fi
          echo "Files to copy:"
          ls -la docs-md/
          # Ensure wiki directory exists
          if [ ! -d wiki ]; then
            echo "Error: Wiki directory not found"
            exit 1
          fi
          echo "Current wiki contents:"
          ls -la wiki/
          # Copy ALL markdown files to wiki
          cp docs-md/*.md wiki/
          # Create or update index page with hierarchical structure
          cat > wiki/Home.md << 'EOF'
          # Welcome to F1 Strategy Manager Wiki
          This wiki contains comprehensive documentation for the F1 Strategy Manager project, organized in a hierarchical structure for easy navigation. 
          It is generated through DeepWiki, if you want to see also the figures of the documentation, please, navigate to [this link over here](https://deepwiki.com/VforVitorio/F1_Strat_Manager).
          ## 📋 Complete Documentation
          - **[📖 Complete Documentation](f1-strat-manager-complete)** - Full system documentation with all sections organized hierarchically
          ## 🗂️ Documentation Structure
          ### 🔍 1. Overview
          - **[Overview](01-overview)** - Project introduction and general information
            - [System Architecture](01-01-system-architecture) - Overall system design and components
            - [Installation and Setup](01-02-installation-setup) - Getting started guide
          ### 📊 2. Streamlit Dashboard
          - **[Streamlit Dashboard](02-streamlit-dashboard)** - Interactive web interface
            - [Strategy Recommendations View](02-01-strategy-recommendations-view) - Strategic decision interface
            - [Gap Analysis View](02-02-gap-analysis-view) - Real-time gap tracking
            - [Radio Analysis View](02-03-radio-analysis-view) - Team radio insights
            - [Time Predictions View](02-04-time-predictions-view) - Lap time forecasting
            - [Strategy Chat Interface](02-05-strategy-chat-interface) - AI-powered strategy chat
          ### 🤖 3. Machine Learning Models
          - **[Machine Learning Models](03-machine-learning-models)** - AI/ML components
            - [Lap Time Prediction](03-01-lap-time-prediction) - Predictive models for lap times
            - [Tire Degradation Modeling](03-02-tire-degradation-modeling) - Tire performance analysis
            - [Vision-based Gap Calculation](03-03-vision-based-gap-calculation) - Computer vision for gap detection
          ### 🎤 4. NLP Pipeline
          - **[NLP Pipeline](04-nlp-pipeline)** - Natural Language Processing components
            - [Radio Transcription](04-01-radio-transcription) - Speech-to-text processing
            - [Sentiment and Intent Analysis](04-02-sentiment-intent-analysis) - Emotional and intent recognition
            - [Named Entity Recognition](04-03-named-entity-recognition) - Entity extraction from radio communications
          ### ⚙️ 5. Expert System
          - **[Expert System](05-expert-system)** - Rule-based decision engine
            - [Degradation Rules](05-01-degradation-rules) - Tire degradation logic
            - [Gap Analysis Rules](05-02-gap-analysis-rules) - Gap calculation rules
            - [Radio Message Rules](05-03-radio-message-rules) - Communication analysis rules
            - [Integrated Rule Engine](05-04-integrated-rule-engine) - Unified rule processing
          ### 👨‍💻 6. Developer Guide
          - **[Developer Guide](06-developer-guide)** - Technical documentation for developers
            - [API Reference](06-01-api-reference) - Complete API documentation
            - [Integration Guide](06-02-integration-guide) - How to integrate with external systems
          ## 🏎️ Project Overview
          The F1 Strategy Manager is an integrated AI-powered system for Formula 1 race strategy analysis and decision support, combining:
          - **🤖 Machine Learning Models** - Predictive analytics for lap times and tire performance
          - **👁️ Computer Vision** - Automated gap calculation from video feeds
          - **🎤 Natural Language Processing** - Radio communication analysis and insights
          - **⚙️ Rule-based Expert Systems** - Strategic recommendations based on F1 expertise
          - **📊 Interactive Streamlit Dashboard** - User-friendly web interface for real-time analysis
          ---
          *📝 This documentation is automatically generated and updated from the project's DeepWiki documentation.*
          EOF
          echo "Files copied to wiki:"
          ls -la wiki/

      - name: Commit and push to GitHub Wiki
        working-directory: wiki
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Full wiki regenerate on ${{ github.sha }}"
          git push

      - name: Cleanup background processes
        if: always()
        run: |
          # Kill any remaining background processes
          pkill -f "mcp-deepwiki" || true
          pkill -f "deepwiki" || true
          echo "Background processes cleaned up"
          # Validate JSON syntax
          if echo "$JSON_PAYLOAD" | jq . > /dev/null 2>&1; then
            echo "✅ JSON payload is valid"
          else
            echo "❌ JSON payload is invalid"
            exit 1
          fi
          # Make the POST request to get ALL pages
          echo "Making POST request to get ALL DeepWiki pages..."
          HTTP_CODE=$(curl -X POST http://localhost:3000/mcp \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            -o docs-md/all-pages-raw.json \
            -w "%{http_code}" \
            -s)
          echo "HTTP status code: $HTTP_CODE"
          # Handle different HTTP response codes
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Success: All pages request completed successfully"
          else
            echo "❌ Error HTTP $HTTP_CODE"
            echo "Response content:"
            cat docs-md/all-pages-raw.json
            
            # Try fallback with aggregate mode
            echo "Trying fallback with aggregate mode..."
            FALLBACK_PAYLOAD='{"jsonrpc":"2.0","method":"tools/call","params":{"name":"deepwiki_fetch","arguments":{"url":"'$DEEPWIKI_URL'","maxDepth":1,"mode":"aggregate"}},"id":1}'
            
            HTTP_CODE=$(curl -X POST http://localhost:3000/mcp \
              -H "Content-Type: application/json" \
              -d "$FALLBACK_PAYLOAD" \
              -o docs-md/all-pages-raw.json \
              -w "%{http_code}" \
              -s)
            
            if [ "$HTTP_CODE" != "200" ]; then
              echo "Fallback method also failed with HTTP $HTTP_CODE"
              exit 1
            fi
            echo "✅ Fallback method succeeded"
          fi
          # Verify file was created and is not empty
          if [ ! -f docs-md/all-pages-raw.json ]; then
            echo "Error: Response file was not created"
            exit 1
          fi
          if [ ! -s docs-md/all-pages-raw.json ]; then
            echo "Error: Response file is empty"
            echo "File content:"
            cat docs-md/all-pages-raw.json
            exit 1
          fi
          echo "✅ All pages response received successfully:"
          ls -la docs-md/
          echo "Response structure:"
          jq -r 'keys' docs-md/all-pages-raw.json || echo "Not valid JSON, showing first 500 chars:"
          head -c 500 docs-md/all-pages-raw.json
      - name: Process and Split Multiple Pages
        run: |
          echo "Processing multiple pages from DeepWiki response..."
          # Install jq if not available
          sudo apt-get update && sudo apt-get install -y jq          # Process the response with Python to handle multiple pages
          python3 << 'EOF'
          import json
          import re
          import sys
          import os
          def clean_deepwiki_content(content):
              """Clean and format DeepWiki content for GitHub Wiki"""
              import re
              # Eliminar bloque de navegación/índice al principio (menú DeepWiki)
              content = re.sub(r'^(?:[\s\S]{0,300}?)(?:github-actions\[bot\].*?revision\n)?(?:[\s\S]{0,300}?)(?:System Architecture|Overview|Streamlit Dashboard|Machine Learning Models|NLP Pipeline|Expert System|Developer Guide|Other Sections)[\s\S]+?(?=\n# |\n## |\n### |\n\Z)', '', content, flags=re.MULTILINE)
              # Eliminar sección '/' y sus repeticiones
              content = re.sub(r'^#? ?/?\n(?:Documentation\n)+', '', content, flags=re.MULTILINE)
              content = re.sub(r'^/?\n+', '', content, flags=re.MULTILINE)
              # Remove DeepWiki UI elements
              content = re.sub(r'.*?DeepWiki.*?\n', '', content, flags=re.IGNORECASE)
              content = re.sub(r'.*?Powered by Devin.*?\n', '', content, flags=re.IGNORECASE)
              content = re.sub(r'.*?Share.*?\n', '', content, flags=re.IGNORECASE)
              content = re.sub(r'.*?Last indexed:.*?\n', '', content, flags=re.IGNORECASE)
              content = re.sub(r'.*?Try DeepWiki.*?\n', '', content, flags=re.IGNORECASE)
              content = re.sub(r'.*?Auto-refresh not enabled yet.*?\n', '', content, flags=re.IGNORECASE)
              content = re.sub(r'.*?Which repo would you like to understand.*?\n', '', content, flags=re.IGNORECASE)
              
              # Remove navigation elements
              content = re.sub(r'- Overview\n- System Architecture.*?- Getting Started\n', '', content, flags=re.DOTALL)
              content = re.sub(r'Menu\n', '', content)
              content = re.sub(r'### On this page.*?- Getting Started\n', '', content, flags=re.DOTALL)
              
              # Remove source file references (they clutter the wiki)
              content = re.sub(r'Relevant source files.*?\n\n', '', content, flags=re.DOTALL)
              content = re.sub(r'Sources:.*?\n', '', content, flags=re.MULTILINE)
              
              # Clean up multiple consecutive newlines
              content = re.sub(r'\n{3,}', '\n\n', content)
              
              # Remove empty sections
              content = re.sub(r'\n## \n', '', content)
              content = re.sub(r'\n### \n', '', content)
              
              # Fix malformed headers
              content = re.sub(r'^([#]+)\s*$', '', content, flags=re.MULTILINE)
              
              # Remove VforVitorio/F1_Strat_Manager title duplicates
              content = re.sub(r'^# /VforVitorio/F1_Strat_Manager.*?\n', '', content, flags=re.MULTILINE)
              content = re.sub(r'VforVitorio/F1_Strat_Manager \| DeepWiki.*?\n', '', content)
              
              # Clean up beginning of content
              content = content.strip()
              
              return content
          def get_page_title_from_content(content):
              """Extract a clean title from content"""
              lines = content.split('\n')
              for line in lines:
                  if line.strip().startswith('# ') and len(line.strip()) > 2:
                      title = line.strip()[2:].strip()
                      # Clean the title
                      title = re.sub(r'^/.*?/', '', title)  # Remove leading path
                      if title:
                          return title
              return "Documentation"
          def safe_filename(title, fallback_idx=None):
              """Genera un nombre de archivo seguro a partir del título. Si el título es vacío, usa un fallback único."""
              if not title or len(title.strip()) == 0:
                  if fallback_idx is not None:
                      return f"unknown-section-{fallback_idx}"
                  return "unknown-section"
              
              filename = title.lower().strip()
              # Elimina caracteres especiales y reemplaza por guiones
              filename = re.sub(r'[^\w\s-]', '', filename)
              filename = re.sub(r'[-\s]+', '-', filename)
              filename = filename.strip('-')  # Quita guiones al inicio/fin
              if not filename:
                  if fallback_idx is not None:
                      return f"unknown-section-{fallback_idx}"
                  return "unknown-section"
              return filename
          def categorize_section(title, fallback_idx=None):
              """Categoriza secciones según la jerarquía especificada"""
              title_lower = title.lower() if title else ''
              
              # Main sections
              if any(keyword in title_lower for keyword in ['overview', 'introducción', 'introduction']):
                  return ('main', 'Overview', '01-overview.md')
              elif any(keyword in title_lower for keyword in ['streamlit', 'dashboard', 'interfaz']):
                  return ('main', 'Streamlit Dashboard', '02-streamlit-dashboard.md')
              elif any(keyword in title_lower for keyword in ['machine learning', 'ml', 'modelo']):
                  return ('main', 'Machine Learning Models', '03-machine-learning-models.md')
              elif any(keyword in title_lower for keyword in ['nlp', 'natural language', 'radio', 'processing']):
                  return ('main', 'NLP Pipeline', '04-nlp-pipeline.md')
              elif any(keyword in title_lower for keyword in ['expert', 'rules', 'engine', 'reglas']):
                  return ('main', 'Expert System', '05-expert-system.md')
              elif any(keyword in title_lower for keyword in ['developer', 'api', 'integration', 'guide']):
                  return ('main', 'Developer Guide', '06-developer-guide.md')
              
              # Streamlit Dashboard subsections
              elif any(keyword in title_lower for keyword in ['strategy recommendations', 'recomendaciones']):
                  return ('sub', 'Streamlit Dashboard', '02-01-strategy-recommendations-view.md')
              elif any(keyword in title_lower for keyword in ['gap analysis view', 'análisis de gaps']):
                  return ('sub', 'Streamlit Dashboard', '02-02-gap-analysis-view.md')
              elif any(keyword in title_lower for keyword in ['radio analysis view', 'análisis de radio']):
                  return ('sub', 'Streamlit Dashboard', '02-03-radio-analysis-view.md')
              elif any(keyword in title_lower for keyword in ['time predictions', 'predicciones']):
                  return ('sub', 'Streamlit Dashboard', '02-04-time-predictions-view.md')
              elif any(keyword in title_lower for keyword in ['chat interface', 'interfaz de chat']):
                  return ('sub', 'Streamlit Dashboard', '02-05-strategy-chat-interface.md')
              
              # Machine Learning subsections
              elif any(keyword in title_lower for keyword in ['lap time prediction', 'predicción de tiempos']):
                  return ('sub', 'Machine Learning Models', '03-01-lap-time-prediction.md')
              elif any(keyword in title_lower for keyword in ['tire degradation', 'degradación', 'neumáticos']):
                  return ('sub', 'Machine Learning Models', '03-02-tire-degradation-modeling.md')
              elif any(keyword in title_lower for keyword in ['vision', 'gap calculation', 'cálculo']):
                  return ('sub', 'Machine Learning Models', '03-03-vision-based-gap-calculation.md')
              
              # NLP Pipeline subsections
              elif any(keyword in title_lower for keyword in ['transcription', 'transcripción']):
                  return ('sub', 'NLP Pipeline', '04-01-radio-transcription.md')
              elif any(keyword in title_lower for keyword in ['sentiment', 'intent', 'análisis']):
                  return ('sub', 'NLP Pipeline', '04-02-sentiment-intent-analysis.md')
              elif any(keyword in title_lower for keyword in ['named entity', 'ner', 'entidades']):
                  return ('sub', 'NLP Pipeline', '04-03-named-entity-recognition.md')
              
              # Expert System subsections
              elif any(keyword in title_lower for keyword in ['degradation rules', 'reglas de degradación']):
                  return ('sub', 'Expert System', '05-01-degradation-rules.md')
              elif any(keyword in title_lower for keyword in ['gap analysis rules', 'reglas de gaps']):
                  return ('sub', 'Expert System', '05-02-gap-analysis-rules.md')
              elif any(keyword in title_lower for keyword in ['radio message rules', 'reglas de radio']):
                  return ('sub', 'Expert System', '05-03-radio-message-rules.md')
              elif any(keyword in title_lower for keyword in ['integrated rule engine', 'motor de reglas']):
                  return ('sub', 'Expert System', '05-04-integrated-rule-engine.md')
              
              # Developer Guide subsections
              elif any(keyword in title_lower for keyword in ['api reference', 'referencia api']):
                  return ('sub', 'Developer Guide', '06-01-api-reference.md')
              elif any(keyword in title_lower for keyword in ['integration guide', 'guía de integración']):
                  return ('sub', 'Developer Guide', '06-02-integration-guide.md')
              elif any(keyword in title_lower for keyword in ['system architecture', 'arquitectura']):
                  return ('sub', 'Overview', '01-01-system-architecture.md')
              elif any(keyword in title_lower for keyword in ['installation', 'setup', 'instalación']):
                  return ('sub', 'Overview', '01-02-installation-setup.md')
                # Fallback seguro
              return ('misc', 'Other', f'99-{safe_filename(title, fallback_idx)}.md')# Read the JSON response
          try:
              with open('docs-md/all-pages-raw.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              
              print(f"Response structure: {list(data.keys())}")
              
              # Handle different response structures
              pages_content = []
              
              if 'result' in data and 'content' in data['result']:
                  if isinstance(data['result']['content'], list):
                      # Multiple content items
                      for item in data['result']['content']:
                          if 'text' in item:
                              pages_content.append(item['text'])
                  else:
                      # Single content item
                      if 'text' in data['result']['content']:
                          pages_content.append(data['result']['content']['text'])
              elif 'result' in data and isinstance(data['result'], str):
                  # Direct string result
                  pages_content.append(data['result'])
              else:
                  print("❌ Unexpected response structure")
                  print(f"Data keys: {list(data.keys())}")
                  sys.exit(1)
              
              print(f"Found {len(pages_content)} content sections")
              
              # Structure to organize content by hierarchy
              organized_content = {
                  'main_sections': {},
                  'subsections': {},
                  'misc': []
              }
                # Process each page/section
              for i, content in enumerate(pages_content):
                  print(f"\nProcessing content section {i+1}...")
                  print(f"Content length: {len(content)} characters")
                  
                  # Validate content is not None or empty
                  if not content or len(str(content).strip()) == 0:
                      print(f"Skipping empty content section {i+1}")
                      continue
                  
                  # Ensure content is string
                  if not isinstance(content, str):
                      print(f"Converting content to string for section {i+1}")
                      content = str(content)
                  
                  # Clean the content
                  cleaned_content = clean_deepwiki_content(content)
                  
                  if len(cleaned_content.strip()) < 50:  # Skip very short content
                      print(f"Skipping short content section {i+1}")
                      continue
                    # Get title and categorize
                  title = get_page_title_from_content(cleaned_content)
                  # Validación de título vacío
                  if not title or len(title.strip()) == 0:
                      print(f"Warning: Empty title found in section {i+1}, using fallback")
                      title = f"Section_{i+1}"
                  section_type, parent_section, filename = categorize_section(title, fallback_idx=i+1)
                  # Validación adicional para filename
                  if not filename or filename == '.md' or filename.startswith('99-.md'):
                      print(f"Warning: Invalid filename generated for '{title}', using fallback")
                      filename = f'99-section-{i+1}.md'
                  
                  # Ensure proper title format
                  if not cleaned_content.strip().startswith('# '):
                      cleaned_content = f'# {title}\n\n' + cleaned_content.strip()
                  
                  # Write individual file
                  filepath = f'docs-md/{filename}'
                  with open(filepath, 'w', encoding='utf-8') as f:
                      f.write(cleaned_content)
                  
                  # Organize content
                  if section_type == 'main':
                      organized_content['main_sections'][parent_section] = {
                          'filename': filename,
                          'title': title,
                          'content': cleaned_content
                      }
                  elif section_type == 'sub':
                      if parent_section not in organized_content['subsections']:
                          organized_content['subsections'][parent_section] = []
                      organized_content['subsections'][parent_section].append({
                          'filename': filename,
                          'title': title,
                          'content': cleaned_content
                      })
                  else:
                      organized_content['misc'].append({
                          'filename': filename,
                          'title': title,
                          'content': cleaned_content
                      })
                  
                  print(f"✅ Created: {filename} (Category: {section_type}, Parent: {parent_section})")
              
              # Create structured comprehensive documentation
              print(f"\nCreating structured comprehensive documentation...")
              
              # Define the correct order of main sections
              section_order = [
                  'Overview',
                  'Streamlit Dashboard', 
                  'Machine Learning Models',
                  'NLP Pipeline',
                  'Expert System',
                  'Developer Guide'
              ]
              
              main_content = "# F1 Strategy Manager - Complete Documentation\n\n"
              main_content += "This document contains the complete documentation for the F1 Strategy Manager project, organized in a hierarchical structure.\n\n"
              main_content += "## Table of Contents\n\n"
              
              # Build table of contents
              for section in section_order:
                  if section in organized_content['main_sections']:
                      section_link = section.lower().replace(' ', '-').replace('.', '').replace('(', '').replace(')', '')
                      main_content += f"### {section}\n"
                      main_content += f"- **[{section}](#{section_link})**\n"
                      
                      # Add subsections
                      if section in organized_content['subsections']:
                          for subsection in organized_content['subsections'][section]:
                              sub_link = subsection['title'].lower().replace(' ', '-').replace('.', '').replace('(', '').replace(')', '')
                              main_content += f"  - [{subsection['title']}](#{sub_link})\n"
                      main_content += "\n"
              
              # Add miscellaneous sections
              if organized_content['misc']:
                  main_content += "### Other Sections\n"
                  for misc_item in organized_content['misc']:
                      misc_link = misc_item['title'].lower().replace(' ', '-').replace('.', '').replace('(', '').replace(')', '')
                      main_content += f"- [{misc_item['title']}](#{misc_link})\n"
                  main_content += "\n"
              
              main_content += "\n---\n\n"
              
              # Add all content in the specified order
              for section in section_order:
                  if section in organized_content['main_sections']:
                      main_section = organized_content['main_sections'][section]
                      main_content += main_section['content'] + "\n\n"
                      
                      # Add subsections immediately after their parent
                      if section in organized_content['subsections']:
                          for subsection in organized_content['subsections'][section]:
                              # Adjust header levels for subsections
                              subsection_content = subsection['content']
                              # Convert main headers to subheaders
                              subsection_content = re.sub(r'^# ', '## ', subsection_content, flags=re.MULTILINE)
                              subsection_content = re.sub(r'^## ', '### ', subsection_content, flags=re.MULTILINE)
                              subsection_content = re.sub(r'^### ', '#### ', subsection_content, flags=re.MULTILINE)
                              main_content += subsection_content + "\n\n"
                      
                      main_content += "---\n\n"
              
              # Add miscellaneous content at the end
              for misc_item in organized_content['misc']:
                  main_content += misc_item['content'] + "\n\n---\n\n"
              
              # Write main comprehensive file
              with open('docs-md/f1-strat-manager-complete.md', 'w', encoding='utf-8') as f:
                  f.write(main_content)
              
              # Count total files
              total_main = len(organized_content['main_sections'])
              total_sub = sum(len(subs) for subs in organized_content['subsections'].values())
              total_misc = len(organized_content['misc'])
              total_files = total_main + total_sub + total_misc + 1  # +1 for complete doc
              
              print(f"✅ Created structured documentation:")
              print(f"  - Main sections: {total_main}")
              print(f"  - Subsections: {total_sub}")
              print(f"  - Miscellaneous: {total_misc}")
              print(f"  - Total files: {total_files}")
              
          except json.JSONDecodeError as e:
              print(f"❌ Error parsing JSON: {e}")
              print("Response might not be valid JSON, trying as plain text...")
              
              # Try to handle as plain text
              with open('docs-md/all-pages-raw.json', 'r', encoding='utf-8') as f:
                  content = f.read()
              
              cleaned_content = clean_deepwiki_content(content)
              
              if not cleaned_content.strip().startswith('# '):
                  cleaned_content = '# F1 Strategy Manager\n\n' + cleaned_content.strip()
              
              with open('docs-md/f1-strat-manager-complete.md', 'w', encoding='utf-8') as f:
                  f.write(cleaned_content)
              
              print("✅ Processed as plain text")
              
          except Exception as e:
              print(f"❌ Error processing content: {e}")
              sys.exit(1)
          EOF
          echo "Final documentation files created:"
          ls -la docs-md/
          echo "Preview of main documentation:"
          head -30 docs-md/f1-strat-manager-complete.md
      - name: Checkout Wiki
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}.wiki
          token: ${{ secrets.WIKI_PAT }}
          path: wiki

      - name: Copy All Documentation to Wiki
        run: |
          # Verify we have files to copy
          if [ ! -d docs-md ] || [ -z "$(ls -A docs-md/*.md 2>/dev/null)" ]; then
            echo "Error: No markdown files to copy"
            exit 1
          fi
          echo "Files to copy:"
          ls -la docs-md/
          # Ensure wiki directory exists
          if [ ! -d wiki ]; then
            echo "Error: Wiki directory not found"
            exit 1
          fi
          echo "Current wiki contents:"
          ls -la wiki/
          # Copy ALL markdown files to wiki
          cp docs-md/*.md wiki/          # Create or update index page with hierarchical structure
          cat > wiki/Home.md << 'EOF'
          # Welcome to F1 Strategy Manager Wiki
          This wiki contains comprehensive documentation for the F1 Strategy Manager project, organized in a hierarchical structure for easy navigation. 
          It is generated through DeepWiki, if you want to see also the figures of the documentation, please, navigate to [this link over here](https://deepwiki.com/VforVitorio/F1_Strat_Manager).
          ## 📋 Complete Documentation
          - **[📖 Complete Documentation](f1-strat-manager-complete)** - Full system documentation with all sections organized hierarchically
          ## 🗂️ Documentation Structure
          ### 🔍 1. Overview
          - **[Overview](01-overview)** - Project introduction and general information
            - [System Architecture](01-01-system-architecture) - Overall system design and components
            - [Installation and Setup](01-02-installation-setup) - Getting started guide
          ### 📊 2. Streamlit Dashboard
          - **[Streamlit Dashboard](02-streamlit-dashboard)** - Interactive web interface
            - [Strategy Recommendations View](02-01-strategy-recommendations-view) - Strategic decision interface
            - [Gap Analysis View](02-02-gap-analysis-view) - Real-time gap tracking
            - [Radio Analysis View](02-03-radio-analysis-view) - Team radio insights
            - [Time Predictions View](02-04-time-predictions-view) - Lap time forecasting
            - [Strategy Chat Interface](02-05-strategy-chat-interface) - AI-powered strategy chat
          ### 🤖 3. Machine Learning Models
          - **[Machine Learning Models](03-machine-learning-models)** - AI/ML components
            - [Lap Time Prediction](03-01-lap-time-prediction) - Predictive models for lap times
            - [Tire Degradation Modeling](03-02-tire-degradation-modeling) - Tire performance analysis
            - [Vision-based Gap Calculation](03-03-vision-based-gap-calculation) - Computer vision for gap detection
          ### 🎤 4. NLP Pipeline
          - **[NLP Pipeline](04-nlp-pipeline)** - Natural Language Processing components
            - [Radio Transcription](04-01-radio-transcription) - Speech-to-text processing
            - [Sentiment and Intent Analysis](04-02-sentiment-intent-analysis) - Emotional and intent recognition
            - [Named Entity Recognition](04-03-named-entity-recognition) - Entity extraction from radio communications
          ### ⚙️ 5. Expert System
          - **[Expert System](05-expert-system)** - Rule-based decision engine
            - [Degradation Rules](05-01-degradation-rules) - Tire degradation logic
            - [Gap Analysis Rules](05-02-gap-analysis-rules) - Gap calculation rules
            - [Radio Message Rules](05-03-radio-message-rules) - Communication analysis rules
            - [Integrated Rule Engine](05-04-integrated-rule-engine) - Unified rule processing
          ### 👨‍💻 6. Developer Guide
          - **[Developer Guide](06-developer-guide)** - Technical documentation for developers
            - [API Reference](06-01-api-reference) - Complete API documentation
            - [Integration Guide](06-02-integration-guide) - How to integrate with external systems
          ## 🏎️ Project Overview
          The F1 Strategy Manager is an integrated AI-powered system for Formula 1 race strategy analysis and decision support, combining:
          - **🤖 Machine Learning Models** - Predictive analytics for lap times and tire performance
          - **👁️ Computer Vision** - Automated gap calculation from video feeds
          - **🎤 Natural Language Processing** - Radio communication analysis and insights
          - **⚙️ Rule-based Expert Systems** - Strategic recommendations based on F1 expertise
          - **📊 Interactive Streamlit Dashboard** - User-friendly web interface for real-time analysis
          ---
          *📝 This documentation is automatically generated and updated from the project's DeepWiki documentation.*          EOF
          echo "Files copied to wiki:"
          ls -la wiki/

      - name: Commit and push to GitHub Wiki
        working-directory: wiki
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Full wiki regenerate on ${{ github.sha }}"
          git push

      - name: Cleanup background processes
        if: always()
        run: |
          # Kill any remaining background processes
          pkill -f "mcp-deepwiki" || true
          pkill -f "deepwiki" || true
          echo "Background processes cleaned up"
