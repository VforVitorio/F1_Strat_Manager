name: Update Wiki from DeepWiki

on:
  push:
    branches:
      - main

jobs:
  update-wiki:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Clone DeepWiki MCP
        run: |
          git clone https://github.com/regenrek/deepwiki-mcp.git deepwiki-mcp
          cd deepwiki-mcp
          npm install

      - name: Build DeepWiki MCP
        working-directory: deepwiki-mcp
        run: |
          # Check if package.json exists and available scripts
          echo "Package.json scripts:"
          npm run || true

          # Try to build the project
          if npm run build 2>/dev/null; then
            echo "Build completed with npm run build"
          elif npm run compile 2>/dev/null; then
            echo "Build completed with npm run compile"
          elif npm run dist 2>/dev/null; then
            echo "Build completed with npm run dist"
          else
            echo "Trying manual build with typescript..."
            npx tsc || echo "Could not compile with tsc"
          fi

          # Verify that dist file exists
          echo "Checking compiled files:"
          ls -la
          if [ -d "dist" ]; then
            ls -la dist/
          else
            echo "dist directory not found"
            echo "Looking for .mjs files in project:"
            find . -name "*.mjs" -type f
          fi

      - name: Start DeepWiki MCP (HTTP mode)
        working-directory: deepwiki-mcp
        run: |
          # Verify that necessary files exist
          ls -la
          ls -la bin/

          # Verify that dist/index.mjs file exists
          if [ ! -f "dist/index.mjs" ]; then
            echo "Error: dist/index.mjs not found"
            echo "Available files:"
            find . -name "*.mjs" -type f
            exit 1
          fi

          # Start service in background
          node ./bin/cli.mjs --http --port 3000 > ../deepwiki.log 2>&1 &
          DEEPWIKI_PID=$!
          echo "DeepWiki PID: $DEEPWIKI_PID"

          # Wait and verify service is available
          for i in {1..30}; do
            if curl -s http://localhost:3000/mcp > /dev/null 2>&1; then
              echo "DeepWiki MCP is available"
              break
            fi
            echo "Waiting for DeepWiki MCP to be available... attempt $i/30"
            sleep 2
          done

          # Verify once more - check /mcp endpoint
          if ! curl -s http://localhost:3000/mcp > /dev/null 2>&1; then
            echo "Error: DeepWiki MCP not available after 60 seconds"
            echo "Service logs:"
            cat ../deepwiki.log
            echo "Process status:"
            ps aux | grep node | grep -v grep || echo "Process not found"
            exit 1
          fi

          # Verify process is running
          ps aux | grep node | grep -v grep

      - name: Export Markdown from DeepWiki
        run: |
          mkdir -p docs-md

          # Verify service is available before making the call
          if ! curl -s http://localhost:3000/mcp > /dev/null 2>&1; then
            echo "Error: Service not available before export"
            echo "Service logs:"
            cat deepwiki.log || echo "No logs found"
            exit 1
          fi

          # Test connectivity first
          echo "Testing service connectivity..."
          curl -X POST http://localhost:3000/mcp -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"tools/list","id":1}' -v || echo "Tools list check failed"

          # Validate DeepWiki URL accessibility
          echo "Validating DeepWiki URL accessibility..."
          DEEPWIKI_URL="https://deepwiki.com/VforVitorio/F1_Strat_Manager"

          # Check if the URL is accessible
          if curl -s --head "$DEEPWIKI_URL" | head -n 1 | grep -q "200 OK"; then
            echo "✅ DeepWiki URL is accessible: $DEEPWIKI_URL"
          else
            echo "⚠️ Warning: DeepWiki URL might not be accessible: $DEEPWIKI_URL"
          fi

          # Create JSON payload using proper escaping
          JSON_PAYLOAD='{"jsonrpc":"2.0","method":"tools/call","params":{"name":"deepwiki_fetch","arguments":{"url":"'$DEEPWIKI_URL'","mode":"aggregate"}},"id":1}'

          echo "JSON-RPC 2.0 payload to send:"
          echo "$JSON_PAYLOAD" | jq . || echo "$JSON_PAYLOAD"

          # Validate JSON syntax
          if echo "$JSON_PAYLOAD" | jq . > /dev/null 2>&1; then
            echo "✅ JSON payload is valid"
          else
            echo "❌ JSON payload is invalid"
            exit 1
          fi

          # Make the POST request
          echo "Making POST request to DeepWiki MCP..."
          HTTP_CODE=$(curl -X POST http://localhost:3000/mcp \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            -o docs-md/f1-strat-manager-raw.md \
            -w "%{http_code}" \
            -s)

          echo "HTTP status code: $HTTP_CODE"

          # Handle different HTTP response codes
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Success: Request completed successfully"
          else
            echo "❌ Error HTTP $HTTP_CODE"
            echo "Response content:"
            cat docs-md/f1-strat-manager-raw.md
            
            # Try fallback method without mode parameter
            echo "Trying fallback method without mode parameter..."
            FALLBACK_PAYLOAD='{"jsonrpc":"2.0","method":"tools/call","params":{"name":"deepwiki_fetch","arguments":{"url":"'$DEEPWIKI_URL'"}},"id":1}'
            
            HTTP_CODE=$(curl -X POST http://localhost:3000/mcp \
              -H "Content-Type: application/json" \
              -d "$FALLBACK_PAYLOAD" \
              -o docs-md/f1-strat-manager-raw.md \
              -w "%{http_code}" \
              -s)
            
            if [ "$HTTP_CODE" != "200" ]; then
              echo "Fallback method also failed with HTTP $HTTP_CODE"
              exit 1
            fi
            echo "✅ Fallback method succeeded"
          fi

          # Verify file was created and is not empty
          if [ ! -f docs-md/f1-strat-manager-raw.md ]; then
            echo "Error: Markdown file was not created"
            exit 1
          fi

          if [ ! -s docs-md/f1-strat-manager-raw.md ]; then
            echo "Error: Markdown file is empty"
            echo "File content:"
            cat docs-md/f1-strat-manager-raw.md
            exit 1
          fi

          echo "✅ Raw markdown file created successfully:"
          ls -la docs-md/
          echo "First 10 lines of raw file:"
          head -10 docs-md/f1-strat-manager-raw.md

      - name: Process and Clean Markdown Content
        run: |
          echo "Processing and cleaning markdown content..."

          # Install jq if not available
          sudo apt-get update && sudo apt-get install -y jq

          # Extract the actual content from the JSON response
          if jq -e '.result.content[0].text' docs-md/f1-strat-manager-raw.md > /dev/null 2>&1; then
            echo "Extracting content from JSON response..."
            jq -r '.result.content[0].text' docs-md/f1-strat-manager-raw.md > docs-md/f1-strat-manager-content.md
          else
            echo "Not a JSON response, treating as plain text..."
            cp docs-md/f1-strat-manager-raw.md docs-md/f1-strat-manager-content.md
          fi

          # Clean the markdown content using Python
          python3 << 'EOF'
          import re
          import sys

          def clean_deepwiki_content(content):
              """Clean and format DeepWiki content for GitHub Wiki"""
              
              # Remove DeepWiki UI elements
              content = re.sub(r'.*?DeepWiki.*?\n', '', content, flags=re.IGNORECASE)
              content = re.sub(r'.*?Powered by Devin.*?\n', '', content, flags=re.IGNORECASE)
              content = re.sub(r'.*?Share.*?\n', '', content, flags=re.IGNORECASE)
              content = re.sub(r'.*?Last indexed:.*?\n', '', content, flags=re.IGNORECASE)
              content = re.sub(r'.*?Try DeepWiki.*?\n', '', content, flags=re.IGNORECASE)
              content = re.sub(r'.*?Auto-refresh not enabled yet.*?\n', '', content, flags=re.IGNORECASE)
              
              # Remove navigation elements
              content = re.sub(r'- Overview\n- System Architecture.*?- Getting Started\n', '', content, flags=re.DOTALL)
              content = re.sub(r'Menu\n', '', content)
              content = re.sub(r'### On this page.*?- Getting Started\n', '', content, flags=re.DOTALL)
              
              # Remove source file references (they clutter the wiki)
              content = re.sub(r'Relevant source files.*?\n\n', '', content, flags=re.DOTALL)
              content = re.sub(r'Sources:.*?\n', '', content, flags=re.MULTILINE)
              
              # Clean up multiple consecutive newlines
              content = re.sub(r'\n{3,}', '\n\n', content)
              
              # Remove empty sections
              content = re.sub(r'\n## \n', '', content)
              content = re.sub(r'\n### \n', '', content)
              
              # Fix malformed headers
              content = re.sub(r'^([#]+)\s*$', '', content, flags=re.MULTILINE)
              
              # Remove VforVitorio/F1_Strat_Manager title duplicates
              content = re.sub(r'^# /VforVitorio/F1_Strat_Manager.*?\n', '', content, flags=re.MULTILINE)
              content = re.sub(r'VforVitorio/F1_Strat_Manager \| DeepWiki.*?\n', '', content)
              
              # Start with proper title
              if not content.strip().startswith('# F1 Strategy Manager'):
                  content = '# F1 Strategy Manager\n\n' + content.strip()
              
              # Clean up beginning of content
              content = content.strip()
              
              return content

          # Read the content
          try:
              with open('docs-md/f1-strat-manager-content.md', 'r', encoding='utf-8') as f:
                  content = f.read()
              
              print(f"Original content length: {len(content)} characters")
              
              # Clean the content
              cleaned_content = clean_deepwiki_content(content)
              
              print(f"Cleaned content length: {len(cleaned_content)} characters")
              
              # Write the cleaned content
              with open('docs-md/f1-strat-manager.md', 'w', encoding='utf-8') as f:
                  f.write(cleaned_content)
              
              print("✅ Content cleaned and saved successfully")
              
          except Exception as e:
              print(f"❌ Error processing content: {e}")
              sys.exit(1)
          EOF

          echo "Cleaned markdown file created:"
          ls -la docs-md/
          echo "First 20 lines of cleaned file:"
          head -20 docs-md/f1-strat-manager.md

      - name: Checkout Wiki
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}.wiki
          token: ${{ secrets.WIKI_PAT }}
          path: wiki

      - name: Copy to Wiki
        run: |
          # Verify we have files to copy
          if [ ! -f docs-md/f1-strat-manager.md ]; then
            echo "Error: No cleaned markdown file to copy"
            exit 1
          fi

          echo "Files to copy:"
          ls -la docs-md/

          # Ensure wiki directory exists
          if [ ! -d wiki ]; then
            echo "Error: Wiki directory not found"
            exit 1
          fi

          echo "Current wiki contents:"
          ls -la wiki/

          # Copy cleaned file to wiki
          cp docs-md/f1-strat-manager.md wiki/

          # Create or update index page
          cat > wiki/Home.md << 'EOF'
          # Welcome to F1 Strategy Manager Wiki

          This wiki contains comprehensive documentation for the F1 Strategy Manager project.

          ## Documentation Pages

          - **[F1 Strategy Manager](f1-strat-manager)** - Complete system documentation including architecture, components, and usage guide

          ## Project Overview

          The F1 Strategy Manager is an integrated AI-powered system for Formula 1 race strategy analysis and decision support, combining:

          - Machine learning models for predictive analytics
          - Computer vision for gap calculation
          - Natural language processing for radio analysis
          - Rule-based expert systems for strategy recommendations
          - Interactive Streamlit dashboard

          ---

          *This documentation is automatically generated from the project's DeepWiki documentation.*
          EOF

          echo "Files copied to wiki:"
          ls -la wiki/

      - name: Commit & Push changes
        working-directory: wiki
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .

          # Check if there are changes before committing
          if git diff --quiet --staged; then
            echo "No changes to commit"
          else
            git commit -m "🔄 Update Wiki from DeepWiki - $(date '+%Y-%m-%d %H:%M')"
            git push
            echo "Changes pushed successfully"
          fi
