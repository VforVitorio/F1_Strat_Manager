name: Update Wiki from DeepWiki

on:
  push:
    branches:
      - main

jobs:
  update-wiki:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Clone DeepWiki MCP
        run: |
          git clone https://github.com/regenrek/deepwiki-mcp.git deepwiki-mcp
          cd deepwiki-mcp
          npm install

      - name: Build DeepWiki MCP
        working-directory: deepwiki-mcp
        run: |
          # Verificar si existe package.json y los scripts disponibles
          echo "Package.json scripts:"
          npm run || true

          # Intentar construir el proyecto
          if npm run build 2>/dev/null; then
            echo "Build completado con npm run build"
          elif npm run compile 2>/dev/null; then
            echo "Build completado con npm run compile"
          elif npm run dist 2>/dev/null; then
            echo "Build completado con npm run dist"
          else
            echo "Intentando build manual con typescript..."
            npx tsc || echo "No se pudo compilar con tsc"
          fi

          # Verificar que el archivo dist existe
          echo "Verificando archivos compilados:"
          ls -la
          if [ -d "dist" ]; then
            ls -la dist/
          else
            echo "Directorio dist no encontrado"
            echo "Buscando archivos .mjs en el proyecto:"
            find . -name "*.mjs" -type f
          fi

      - name: Start DeepWiki MCP (HTTP mode)
        working-directory: deepwiki-mcp
        run: |
          # Verificar que los archivos necesarios existan
          ls -la
          ls -la bin/

          # Verificar que el archivo dist/index.mjs existe
          if [ ! -f "dist/index.mjs" ]; then
            echo "Error: dist/index.mjs no encontrado"
            echo "Archivos disponibles:"
            find . -name "*.mjs" -type f
            exit 1
          fi

          # Iniciar el servicio en background
          node ./bin/cli.mjs --http --port 3000 > ../deepwiki.log 2>&1 &
          DEEPWIKI_PID=$!
          echo "DeepWiki PID: $DEEPWIKI_PID"

          # Esperar y verificar que el servicio estÃ© disponible
          for i in {1..30}; do
            if curl -s http://localhost:3000/ > /dev/null; then
              echo "DeepWiki MCP estÃ¡ disponible"
              break
            fi
            echo "Esperando que DeepWiki MCP estÃ© disponible... intento $i/30"
            sleep 2
          done

          # Verificar una vez mÃ¡s
          if ! curl -s http://localhost:3000/ > /dev/null; then
            echo "Error: DeepWiki MCP no estÃ¡ disponible despuÃ©s de 60 segundos"
            echo "Logs del servicio:"
            cat ../deepwiki.log
            echo "Estado del proceso:"
            ps aux | grep node | grep -v grep || echo "No se encontrÃ³ el proceso"
            exit 1
          fi

          # Verificar que el proceso estÃ© ejecutÃ¡ndose
          ps aux | grep node | grep -v grep

      - name: Export Markdown from DeepWiki
        run: |
          mkdir -p docs-md

          # Verificar que el servicio estÃ© disponible antes de hacer la llamada
          if ! curl -s http://localhost:3000/ > /dev/null; then
            echo "Error: Servicio no disponible antes de exportar"
            echo "Logs del servicio:"
            cat deepwiki.log || echo "No se encontraron logs"
            exit 1
          fi

          # Llamada POST al endpoint /mcp para obtener el Markdown
          curl -X POST http://localhost:3000/mcp \
            -H "Content-Type: application/json" \
            -d '{"id":"req-1","action":"deepwiki_fetch","params":{"url":"https://deepwiki.com/VforVitorio/F1_Strat_Manager","mode":"aggregate"}}' \
            -o docs-md/f1-strat-manager.md \
            --fail-with-body \
            -w "HTTP status: %{http_code}\n"

          # Verificar que el archivo se haya creado correctamente
          if [ ! -f docs-md/f1-strat-manager.md ]; then
            echo "Error: El archivo markdown no se creÃ³"
            exit 1
          fi

          if [ ! -s docs-md/f1-strat-manager.md ]; then
            echo "Error: El archivo markdown estÃ¡ vacÃ­o"
            echo "Contenido del archivo:"
            cat docs-md/f1-strat-manager.md
            exit 1
          fi

          echo "Archivo markdown creado exitosamente:"
          ls -la docs-md/
          echo "Primeras lÃ­neas del archivo:"
          head -10 docs-md/f1-strat-manager.md

      - name: Checkout Wiki
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}.wiki
          token: ${{ secrets.WIKI_PAT }}
          path: wiki

      - name: Copy to Wiki
        run: |
          # Verificar que tenemos archivos para copiar
          if [ ! -d docs-md ] || [ -z "$(ls -A docs-md/*.md 2>/dev/null)" ]; then
            echo "Error: No hay archivos markdown para copiar"
            exit 1
          fi

          echo "Archivos a copiar:"
          ls -la docs-md/

          # Limpiar wiki y copiar archivos
          rm -rf wiki/*
          cp docs-md/*.md wiki/

          echo "Archivos copiados a wiki:"
          ls -la wiki/

      - name: Commit & Push changes
        working-directory: wiki
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .

          # Verificar si hay cambios antes de hacer commit
          if git diff --quiet --staged; then
            echo "No hay cambios para commitear"
          else
            git commit -m "ðŸ”„ Update Wiki from DeepWiki"
            git push
            echo "Cambios enviados exitosamente"
          fi
