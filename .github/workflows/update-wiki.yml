name: Update Wiki from DeepWiki

on:
  push:
    branches:
      - main

jobs:
  update-wiki:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Clone DeepWiki MCP
        run: |
          git clone https://github.com/regenrek/deepwiki-mcp.git deepwiki-mcp
          cd deepwiki-mcp
          npm install

      - name: Build DeepWiki MCP
        working-directory: deepwiki-mcp
        run: |
          # Check if package.json exists and available scripts
          echo "Package.json scripts:"
          npm run || true

          # Try to build the project
          if npm run build 2>/dev/null; then
            echo "Build completed with npm run build"
          elif npm run compile 2>/dev/null; then
            echo "Build completed with npm run compile"
          elif npm run dist 2>/dev/null; then
            echo "Build completed with npm run dist"
          else
            echo "Trying manual build with typescript..."
            npx tsc || echo "Could not compile with tsc"
          fi

          # Verify that dist file exists
          echo "Checking compiled files:"
          ls -la
          if [ -d "dist" ]; then
            ls -la dist/
          else
            echo "dist directory not found"
            echo "Looking for .mjs files in project:"
            find . -name "*.mjs" -type f
          fi

      - name: Start DeepWiki MCP (HTTP mode)
        working-directory: deepwiki-mcp
        run: |
          # Verify that necessary files exist
          ls -la
          ls -la bin/

          # Verify that dist/index.mjs file exists
          if [ ! -f "dist/index.mjs" ]; then
            echo "Error: dist/index.mjs not found"
            echo "Available files:"
            find . -name "*.mjs" -type f
            exit 1
          fi

          # Start service in background
          node ./bin/cli.mjs --http --port 3000 > ../deepwiki.log 2>&1 &
          DEEPWIKI_PID=$!
          echo "DeepWiki PID: $DEEPWIKI_PID"

          # Wait and verify service is available
          for i in {1..30}; do
            if curl -s http://localhost:3000/ > /dev/null; then
              echo "DeepWiki MCP is available"
              break
            fi
            echo "Waiting for DeepWiki MCP to be available... attempt $i/30"
            sleep 2
          done

          # Verify once more
          if ! curl -s http://localhost:3000/ > /dev/null; then
            echo "Error: DeepWiki MCP not available after 60 seconds"
            echo "Service logs:"
            cat ../deepwiki.log
            echo "Process status:"
            ps aux | grep node | grep -v grep || echo "Process not found"
            exit 1
          fi

          # Verify process is running
          ps aux | grep node | grep -v grep

      - name: Export Markdown from DeepWiki
        run: |
          mkdir -p docs-md

          # Verify service is available before making the call
          if ! curl -s http://localhost:3000/ > /dev/null; then
            echo "Error: Service not available before export"
            echo "Service logs:"
            cat deepwiki.log || echo "No logs found"
            exit 1
          fi

          # Test connectivity first
          echo "Testing service connectivity..."
          curl -X GET http://localhost:3000/ -v || echo "Health check failed"

          # Try different URL formats and validate the URL first
          echo "Validating DeepWiki URL accessibility..."
          DEEPWIKI_URL="https://deepwiki.com/VforVitorio/F1_Strat_Manager"

          # Check if the URL is accessible
          if curl -s --head "$DEEPWIKI_URL" | head -n 1 | grep -q "200 OK"; then
            echo "‚úÖ DeepWiki URL is accessible: $DEEPWIKI_URL"
          else
            echo "‚ö†Ô∏è Warning: DeepWiki URL might not be accessible: $DEEPWIKI_URL"
          fi

          # Prepare JSON payload with proper escaping
          JSON_PAYLOAD=$(cat <<EOF
          {
            "id": "req-1",
            "action": "deepwiki_fetch",
            "params": {
              "url": "$DEEPWIKI_URL",
              "mode": "aggregate"
            }
          }
          EOF
          )

          echo "JSON payload to send:"
          echo "$JSON_PAYLOAD" | jq . || echo "$JSON_PAYLOAD"

          # Validate JSON syntax
          if echo "$JSON_PAYLOAD" | jq . > /dev/null 2>&1; then
            echo "‚úÖ JSON payload is valid"
          else
            echo "‚ùå JSON payload is invalid"
            exit 1
          fi

          # Make the POST request
          echo "Making POST request to DeepWiki MCP..."
          HTTP_CODE=$(curl -X POST http://localhost:3000/mcp \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            -o docs-md/f1-strat-manager.md \
            -w "%{http_code}" \
            -s)

          echo "HTTP status code: $HTTP_CODE"

          # Handle different HTTP response codes
          case $HTTP_CODE in
            200)
              echo "‚úÖ Success: Request completed successfully"
              ;;
            400)
              echo "‚ùå Error 400: Bad Request"
              echo "Response content:"
              cat docs-md/f1-strat-manager.md
              echo ""
              echo "Possible issues:"
              echo "- URL format is incorrect"
              echo "- JSON payload is malformed"
              echo "- Missing required parameters"
              echo "- URL domain is not deepwiki.com"
              exit 1
              ;;
            404)
              echo "‚ùå Error 404: Endpoint not found"
              echo "Check if the /mcp endpoint exists"
              exit 1
              ;;
            500)
              echo "‚ùå Error 500: Internal Server Error"
              echo "Check server logs for details"
              cat deepwiki.log || echo "No logs available"
              exit 1
              ;;
            *)
              echo "‚ùå Unexpected HTTP status: $HTTP_CODE"
              echo "Response content:"
              cat docs-md/f1-strat-manager.md
              exit 1
              ;;
          esac

          # Verify file was created and is not empty
          if [ ! -f docs-md/f1-strat-manager.md ]; then
            echo "Error: Markdown file was not created"
            exit 1
          fi

          if [ ! -s docs-md/f1-strat-manager.md ]; then
            echo "Error: Markdown file is empty"
            echo "File content:"
            cat docs-md/f1-strat-manager.md
            exit 1
          fi

          echo "‚úÖ Markdown file created successfully:"
          ls -la docs-md/
          echo "First 10 lines of file:"
          head -10 docs-md/f1-strat-manager.md

      - name: Checkout Wiki
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}.wiki
          token: ${{ secrets.WIKI_PAT }}
          path: wiki

      - name: Copy to Wiki
        run: |
          # Verify we have files to copy
          if [ ! -d docs-md ] || [ -z "$(ls -A docs-md/*.md 2>/dev/null)" ]; then
            echo "Error: No markdown files to copy"
            exit 1
          fi

          echo "Files to copy:"
          ls -la docs-md/

          # Clean wiki and copy files
          rm -rf wiki/*
          cp docs-md/*.md wiki/

          echo "Files copied to wiki:"
          ls -la wiki/

      - name: Commit & Push changes
        working-directory: wiki
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .

          # Check if there are changes before committing
          if git diff --quiet --staged; then
            echo "No changes to commit"
          else
            git commit -m "üîÑ Update Wiki from DeepWiki"
            git push
            echo "Changes pushed successfully"
          fi
